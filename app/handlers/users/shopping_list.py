from aiogram import types, Dispatcher

from app.keyboards.inline.show_lall_list import generate_items_list, items_cd
from app.loader import db, dp
from app.filters.chat_filter import Private_chat_filter
from app.utils.misc import useful_funcs


async def create_new_list(message: types.Message):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ create_list"""
    is_user_already_in_list = await db.count_user_lists(tg_id=message.from_user.id)
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–ø–∏—Å–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not is_user_already_in_list:
        new_list = await  db.add_new_list(tg_id=message.from_user.id)
        new_list_dict = dict(new_list)

        await message.answer(
            text='\n'.join([
                f'–¢—ã —Å–æ–∑–¥–∞–ª –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫!ü•≥',
                f'',
                f'–ü–æ –º–æ–µ–π –∏–¥–µ–æ–ª–æ–≥–∏–∏, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–ø–∏—Å–∫–æ–º, —Ç–µ–±–µ –Ω–∞–¥–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å'
                f' —á–µ–ª–æ–≤–µ–∫–∞ –∏–ª–∏ –ª—é–¥–µ–π, —Å –∫–µ–º —Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ—à—å —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫.',
                f'–î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π <code>/invite</code>.',
                f'',
                f'–ü–æ–ª—É—á–µ–Ω–Ω–æ–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã <code>/invite</code> —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—à–ª–∏ —Ç–æ–º—É, –∫–æ–≥–æ —Ö–æ—á–µ—à—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –æ–±—â–µ–º—É —Å–ø–∏—Å–∫—É –ø–æ–∫—É–ø–æ–∫.'
            ])
        )
        #—É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        text_for_admin = '\n'.join([
            f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            f'<b>TELEGRAM_ID:</b> <code>{new_list_dict["tg_id"]}</code>',
            f'–°–æ–∑–¥–∞–ª –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫',
            f'<b>LIST_ID:</b> <code>{new_list_dict["list_id"]}</code>'
        ])
        await useful_funcs.send_message_to_admin(text_for_admin)
    else:
        # –¥–æ—Å—Ç–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–ø–∏—Å–∫–∞, –∫—Ä–æ–º–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ
        users_in_list_text = await useful_funcs.get_list_users(tg_id=message.from_user.id)
        if users_in_list_text:
            answer_part = f'—É–∂–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ —Å–ø–∏—Å–∫–µ —Å {users_in_list_text}.\n' \
                          f'–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏—Ö —Å–ø–∏—Å–∫–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π <code>/quit</code>'
        else:
            answer_part = '—É–∂–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ —Å–ø–∏—Å–∫–µ, –≥–¥–µ —Ç—ã ‚Äî –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫.\n' \
                          '–ú–æ–∂–µ—à—å –≤—ã–π—Ç–∏ –∫–æ–º–∞–Ω–¥–æ–π <code>/quit</code>' \
                          ' –∏–ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥–æ–π <code>/invite</code>'
        await message.answer(
            text='\n'.join([
                '–ù–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ç–µ–±—èüòî',
                f'‚ùó–¢—ã {answer_part}'
            ])
        )


async def invite_mate(message: types.Message):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –±–ª–∏–∑–∫–æ–≥–æ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ –∫–æ–º–∞–Ω–¥–µ /invite"""
    is_inviter_in_list = await db.count_user_lists(tg_id=message.from_user.id)

    if is_inviter_in_list:
        bot = await dp.bot.get_me()
        inviter = useful_funcs.choose_user_name(
            {
                'tg_username': message.from_user.username,
                'full_name': message.from_user.full_name
            }
        )
        await message.answer(text='\n'.join([
            f'–ü—Ä–∏–≤–µ—Ç!üëãüèº',
            f'üì©–ü—Ä–∏–≥–ª–∞—à–∞—é —Ç–µ–±—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –æ–±—â–µ–º—É —Å–ø–∏—Å–∫—É –ø–æ–∫—É–ø–æ–∫ —Å {inviter}.',
            f'',
            f'–î–ª—è —ç—Ç–æ–≥–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ –º–Ω–æ–π @{bot.username}'
            f' –∏ –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É (—Å–∫–æ–ø–∏—Ä—É–π –∫–æ–º–∞–Ω–¥—É –±—ã—Å—Ç—Ä—ã–º –Ω–∞–∂–∞—Ç–∏–µ–º):',
            f'',
            f'<code>/join {message.from_user.id}</code>'
        ]))
    else:
        await message.answer(
            text='\n'.join([
                '‚ùó–¢—ã –Ω–µ –º–æ–∂–µ—à—å –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Ç–∞–∫ –∫–∞–∫ —Å–∞–º –Ω–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ —Å–ø–∏—Å–∫–µüòî',
                '–ú–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ <code>/create_list</code> –∏ –ø–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω–≤–∞–π—Ç—ã.'
            ])
        )


async def join_to_list(message: types.Message):
    """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Å–ø–∏—Å–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–µ /join <tg_id_of_inviter> —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º"""
    message_args = message.get_args()
    if not message_args:
        await message.answer(
            '‚ùó–î–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–º—É —Å–ø–∏—Å–∫—É –ø–æ–∫—É–ø–æ–∫, –∑–∞–ø—Ä–æ—Å–∏ –∏–Ω–≤–∞–π—Ç.'
        )
    else:
        try:
            inviter_id = int(message_args)
        except ValueError:
            inviter_id = -1

        if inviter_id == message.from_user.id:
            #–∫–æ–≥–¥–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—å —Å–ø–∏—Å–∫–∞ —Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å—Å—è —Å–∞–º –∫ —Å–µ–±–µ
            await message.answer('–•–æ—á–µ—à—å –≤–µ—Å—Ç–∏ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ —Å —Å–∞–º–∏–º —Å–æ–±–æ–π, –ë–∏–ª–ª–∏ –ú–∏–ª–ª–∏–≥–∞–Ω?üòè')
        else:
            # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç—è—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è
            is_inviter_has_list = await db.count_user_lists(tg_id=inviter_id)
            if is_inviter_has_list: #–µ—Å–ª–∏ inviter —Å–æ—Å—Ç–æ–∏—Ç –≤ —Å–ø–∏—Å–∫–µ
                #–ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–∞–∫–æ–º-–Ω–∏–±—É–¥—å —Å–ø–∏—Å–∫–µ
                is_user_already_in_list = await db.count_user_lists(message.from_user.id)
                if not is_user_already_in_list:
                    #–∑–∞–±–∏—Ä–∞–µ–º list_id –Ω–∞ –æ—Å–Ω–æ–≤–µ inviter'–∞
                    list_id = await db.get_list_id(tg_id=inviter_id)
                    invited_user = await db.add_user_to_list(
                        tg_id=message.from_user.id,
                        list_id=list_id
                    )
                    # –¥–æ—Å—Ç–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–ø–∏—Å–∫–∞, –∫—Ä–æ–º–µ –≤–Ω–æ–≤—å –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ
                    users_in_list_text = await useful_funcs.get_list_users(tg_id=message.from_user.id)

                    await message.answer(
                        text='\n'.join([
                            f'–û—Ç–ª–∏—á–Ω–æ!ü•≥',
                            f' –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ —Å '
                            f'{users_in_list_text}.',
                            f'–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π <code>/add *name*</code>, –≥–¥–µ <code>*name*</code>'
                            f' –∑–∞–º–µ–Ω–∏ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏.',
                            f'–ù–∞–ø—Ä–∏–º–µ—Ä <code>/add –º–æ–ª–æ–∫–æ</code>'
                        ])
                    )
                    #—Ä–∞—Å—Å—ã–ª–∫–∞–µ–º –¥—Ä—É–∑—å—è–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
                    users_in_list = await db.get_list_users(tg_id=message.from_user.id)
                    new_user_name = useful_funcs.choose_user_name(
                        {
                            'tg_username': message.from_user.username,
                            'full_name': message.from_user.full_name
                        }
                    )
                    for user in users_in_list:
                        user_dict = dict(user)
                        await dp.bot.send_message(
                            chat_id=user_dict["tg_id"],
                            text=f'üòç{new_user_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è!'
                        )
                    # —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
                    text_for_admin = '\n'.join([
                        f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                        f'<b>TELEGRAM_ID:</b> <code>{invited_user["tg_id"]}</code>',
                        f'–î–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫',
                        f'<b>LIST_ID:</b> <code>{invited_user["list_id"]}</code>'
                    ])
                    await useful_funcs.send_message_to_admin(text_for_admin)
                else: # –µ—Å–ª–∏ —á—É–≤–∞–∫/—á—É–≤–∏—Ö–∞ —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ
                    # –¥–æ—Å—Ç–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–ø–∏—Å–∫–∞, –∫—Ä–æ–º–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ
                    users_in_list_text = await useful_funcs.get_list_users(tg_id=message.from_user.id)
                    if users_in_list_text:
                        answer_part = f'üë®‚Äçüë©‚Äçüëß‚Äçüë¶–¢—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ –ø–æ–∫—É–ø–æ–∫ —Å {users_in_list_text}.'
                    else:
                        answer_part = '–¢—ã —Å–æ—Å—Ç–æ–∏—à—å –≤ —Å–ø–∏—Å–∫–µ –ø–æ–∫—É–ø–æ–∫, –Ω–æ —Å —Ç–æ–±–æ–π —Ç—É—Ç –Ω–∏–∫–æ–≥–æ –Ω–µ—ÇüôÅ'
                    await message.answer(
                        text='\n'.join([
                            f'{answer_part}',
                            f'‚ùó–ù–µ–ª—å–∑—è —Å–æ—Å—Ç–æ—è—Ç—å –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ø–∏—Å–∫–∞—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.',
                            f'–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π <code>/quit</code>'
                        ])
                    )
            else: # –µ—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç-—Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –Ω–µ–≤–µ—Ä–Ω—ã–π
                await message.answer('‚ùó–¢–∞–∫–æ–≥–æ –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')


async def quit_from_list(message: types.Message):
    is_user_in_list = await db.count_user_lists(tg_id=message.from_user.id)
    #–µ—Å–ª–∏ —á—É–≤–∞–∫/—á—É–≤–∏—Ö–∞ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ
    if is_user_in_list:
        users_in_list = await db.get_list_users(tg_id=message.from_user.id)
        quit_user = await db.delete_user_from_list(tg_id=message.from_user.id)
        quit_user_dict = dict(quit_user)

        await message.answer(
            text='\n'.join([
                '‚úî–¢—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–µ–ª –∏–∑ —Å–ø–∏—Å–∫–∞!',
                '–ï—Å–ª–∏ —Ç—ã —Å–¥–µ–ª–∞–ª —ç—Ç–æ –ø–æ –æ—à–∏–±–∫–µ, –ø–æ–ø—Ä–æ—Å–∏ –ø—Ä–∏—Å–ª–∞—Ç—å —Ç–µ–±–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∏–Ω–≤–∞–π—Ç.'
            ])
        )
        # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –≤—ã—à–µ–¥—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–∑–µ–π
        quit_user_name = useful_funcs.choose_user_name(
            {
                'tg_username': message.from_user.username,
                'full_name': message.from_user.full_name
            }
        )
        for user in users_in_list:
            user_dict = dict(user)
            await dp.bot.send_message(
                chat_id=user_dict["tg_id"],
                text=f'üò≠{quit_user_name} –ø–æ–∫–∏–Ω—É–ª –≤–∞—Å..'
            )
        #—É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        text_for_admin = '\n'.join([
            f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            f'<b>TELEGRAM_ID:</b> <code>{quit_user_dict["tg_id"]}</code>',
            f'–í—ã—à–µ–ª –∏–∑ —Å–ø–∏—Å–∫–∞',
            f'<b>LIST_ID: </b> <code>{quit_user_dict["list_id"]}</code>'
        ])
        await useful_funcs.send_message_to_admin(text_for_admin)
    else:
        await message.answer('‚ùó–¢—ã –∏ —Ç–∞–∫ –Ω–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ —Å–ø–∏—Å–∫–µ.')


async def show_list_participants(message: types.Message):
    """–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Å–æ—Å—Ç–∞–≤–∞ —Å–ø–∏—Å–∫–∞"""
    is_user_in_list = await db.count_user_lists(tg_id=message.from_user.id)
    if is_user_in_list:
        users_in_list_text = await useful_funcs.get_list_users(tg_id=message.from_user.id)
        if users_in_list_text:
            answer_text = f'üë®‚Äçüë©‚Äçüëß‚Äçüë¶–¢—ã —Å–æ—Å—Ç–æ–∏—à—å –≤ —Å–ø–∏—Å–∫–µ —Å {users_in_list_text}.'
        else:
            answer_text = '‚ùó–¢—ã ‚Äî –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ —Å–ø–∏—Å–∫–∞.'
    else:
        answer_text = '‚ùó–¢—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ —Å–ø–∏—Å–∫–µ.'
    await message.answer(text=answer_text)


async def add_item(message: types.Message):
    is_user_in_list = await db.count_user_lists(tg_id=message.from_user.id)
    if is_user_in_list:
        items = message.get_args().split()
        if items:
            list_id = await db.get_list_id(tg_id=message.from_user.id)
            added_items = []
            for item_nm in items:
                added_item = await db.add_item(list_id=list_id, item_nm=item_nm)
                item_dict = dict(added_item)
                added_items.append(item_dict['item_nm'])
            added_items_text = '\n  ‚ñ´'.join(added_items)
            await message.answer(
                text=f'‚ûï–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫:\n'
                     f'  ‚ñ´{added_items_text}'
            )
        else:
            await message.answer(
                text='\n'.join([
                    '‚ùó–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –≤ —Å–ø–∏—Å–æ–∫, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç—å –∏—Ö <b><u>—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª</u></b> '
                    '–ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã <code>/add</code>.',
                    '–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/add –º–æ–ª–æ–∫–æ —Ö–ª–µ–± –ø–∏–≤–∫–æ</code>'
                ])
            )
    else:
        await message.answer('‚ùó–¢—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ —Å–ø–∏—Å–∫–µ, –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è.')

@dp.callback_query_handler(items_cd.filter())
async def delete_item(call: types.CallbackQuery, callback_data: dict):
    try:
        deleted_item = await db.delete_item(item_id=int(callback_data.get('item_id')))
        deleted_item_dict = dict(deleted_item)
        await call.answer(
            text=f'‚ûñ–£–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞: {deleted_item_dict["item_nm"]}',
            show_alert=True,
            cache_time=10
        )

        updated_reply_markup = await generate_items_list(list_id=deleted_item_dict["list_id"])
        if updated_reply_markup.inline_keyboard:
            await call.message.edit_reply_markup(updated_reply_markup)
        else:
            await call.message.edit_text('üõí–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç.')
    except TypeError:
        await call.answer(
            text='‚ûñ–≠—Ç–∞ –ø–æ–∑–∏—Ü–∏—è —É–∂–µ —É–¥–∞–ª–µ–Ω–∞',
            show_alert=True,
            cache_time=10
        )
        list_id = await db.get_list_id(tg_id=call.from_user.id)
        updated_reply_markup = await generate_items_list(list_id=list_id)
        if updated_reply_markup.inline_keyboard:
            await call.message.edit_reply_markup(updated_reply_markup)
        else:
            await call.message.edit_text('üõí–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç.')


@dp.callback_query_handler(text='delete')
async def delete_all_list(call: types.CallbackQuery):
    list_id = await db.get_list_id(tg_id=call.from_user.id)
    await db.clear_shopping_list(list_id=list_id)

    await call.answer(
        text='‚ùó–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω.',
        show_alert=True,
        cache_time=10
    )

    await call.message.edit_reply_markup(reply_markup=None)
    await call.message.edit_text('üõí–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç.')



async def show_list(message: types.Message):
    is_user_in_list = await db.count_user_lists(tg_id=message.from_user.id)
    if is_user_in_list:
        list_id = await db.get_list_id(tg_id=message.from_user.id)
        reply_markup = await generate_items_list(list_id=list_id)
        if reply_markup.inline_keyboard:
            await message.answer(
                text='üßæ–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫:',
                reply_markup=reply_markup
            )
        else:
            await message.answer('üõí–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç.')
    else:
        await message.answer('‚ùó–¢—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ —Å–ø–∏—Å–∫–µ.')

def register_shopping_list(dp: Dispatcher):
    dp.register_message_handler(create_new_list, commands=['create_list'])
    dp.register_message_handler(invite_mate, Private_chat_filter() ,commands=['invite'])
    dp.register_message_handler(join_to_list, Private_chat_filter(), commands=['join'])
    dp.register_message_handler(quit_from_list, Private_chat_filter(), commands=['quit'])
    dp.register_message_handler(show_list_participants, commands=['show_mates'])
    dp.register_message_handler(add_item, commands=['add'])
    dp.register_message_handler(show_list, commands=['show_list'])